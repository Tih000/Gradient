{"version":3,"file":"offscreen.bundle.js","mappings":"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","sources":["webpack://gradient-extension-refactor/./src/background/library/decorators.ts","webpack://gradient-extension-refactor/./src/background/library/p2psdk.js","webpack://gradient-extension-refactor/./src/offscreen/offscreen.ts"],"sourcesContent":["export function onMessageExternal(action) {\n    return function (target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        chrome.runtime.onMessageExternal.addListener((message, sender, sendResponse) => {\n            if (message.action === action) {\n                originalMethod.call(target, message, sender, sendResponse);\n                return true;\n            }\n        });\n        return descriptor;\n    };\n}\nexport function onMessage(action) {\n    return function (target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            if (message.action === action) {\n                originalMethod.call(target, message, sender, sendResponse);\n                return true;\n            }\n        });\n        return descriptor;\n    };\n}\n","async function wait4(cond, timeout) {\n    const startTime = Date.now();\n\n    while (!cond()) {\n        if (Date.now() - startTime >= timeout) {\n            return false;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 10));\n    }\n\n    return true;\n}\n\nfunction uuidv4() {\n    return \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, (c) =>\n        (\n            +c ^\n            (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (+c / 4)))\n        ).toString(16)\n    );\n}\n\nclass RelayClient {\n    _peerID;\n    _isAlive;\n    _ws;\n    _state; // 0(UNAVAILABLE), 1(CONNECTED), 2(ALIVE)\n    _keepAliveTimer;\n    _lastPongTime;\n    _reconnectInterval = 3000;\n    reconnectTimeCeiling = process.env.RECONNECT_TIME_CEILING\n        ? Number(process.env.RECONNECT_TIME_CEILING)\n        : 600000;\n\n    constructor(peerID, onmessage) {\n        this._peerID = peerID;\n        this._connect(onmessage);\n    }\n\n    _connect(onmessage) {\n        this._ws = new WebSocket(\"wss://wf.gradient.network/ws\");\n\n        this._ws.onopen = () => {\n            console.log(\"[RelayClient] connection opened\");\n            this._state = 1;\n            this._register().then((success) => {\n                console.log(\"[RelayClient] register result:\", success);\n                if (success) {\n                    this._keepAlive();\n                } else {\n                    this._ws.close();\n                }\n            });\n        };\n\n        this._ws.onmessage = (event) => {\n            console.log(\"[RelayClient] receive:\", event);\n\n            const evData = event.data;\n            if (typeof evData !== \"string\") {\n                console.error(\"[RelayClient] unknown message type\");\n                return;\n            }\n            const message = JSON.parse(evData);\n            switch (message.cmd) {\n                case 1:\n                    if (this._state === 1) {\n                        this._state = 2;\n                    }\n                    break;\n                case 2:\n                    if (onmessage) {\n                        const obj = JSON.parse(message.data);\n                        onmessage(obj.from_peer_id, obj.event_name, obj.data);\n                    }\n                    break;\n                case 4:\n                    if (this._state === 2) {\n                        this._lastPongTime = Date.now();\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        };\n\n        this._ws.onerror = (error) => {\n            console.error(\"[RelayClient] error observed:\", error);\n        };\n\n        this._ws.onclose = (event) => {\n            console.log(\"[RelayClient] connection closed:\", event);\n            this._state = 0;\n            clearInterval(this._keepAliveTimer);\n            this._reconnect(onmessage);\n        };\n    }\n\n    _register() {\n        const obj = {\n            peer_id: this._peerID,\n        };\n        const message = {\n            cmd: 1,\n            data: JSON.stringify(obj),\n        };\n        this._ws.send(JSON.stringify(message));\n\n        return wait4(() => {\n            return this._state === 2;\n        }, 1000);\n    }\n\n    _keepAlive() {\n        const fn = () => {\n            // send ping\n            const obj = {\n                peer_id: this._peerID,\n            };\n            const message = {\n                cmd: 4,\n                data: JSON.stringify(obj),\n            };\n            this._ws.send(JSON.stringify(message));\n\n            // wait for pong\n            wait4(() => {\n                return Date.now() - this._lastPongTime <= 20000;\n            }, 1000).then((success) => {\n                console.log(\"[RelayClient] keepalive result:\", success);\n                if (success) {\n                    this._reconnectInterval = 3000; // reset reconnect interval\n                } else {\n                    this._ws.close();\n                }\n            });\n        };\n\n        this._lastPongTime = 0;\n        this._keepAliveTimer = setInterval(fn, 5000);\n    }\n\n    _reconnect(onmessage) {\n        console.log(\n            \"[RelayClient] trying to reconnect after\",\n            this._reconnectInterval,\n            \"ms\"\n        );\n        setTimeout(() => {\n            this._connect(onmessage);\n        }, this._reconnectInterval);\n        \n        this._reconnectInterval = Math.min(\n            this._reconnectInterval * 2,\n            this.reconnectTimeCeiling\n        );\n    }\n\n    send(to, event, data) {\n        const obj = {\n            from_peer_id: this._peerID,\n            to_peer_id: to,\n            event_name: event,\n            data: JSON.stringify(data),\n        };\n        console.log(\"[RelayClient] send message:\", obj);\n\n        const message = {\n            cmd: 2,\n            data: JSON.stringify(obj),\n        };\n\n        const msg = JSON.stringify(message);\n        this._ws.send(msg);\n    }\n}\n\nclass Emitter extends EventTarget {\n    emit(name, data) {\n        const event = new CustomEvent(name, { detail: data });\n        this.dispatchEvent(event);\n    }\n    on(name, fn) {\n        this.addEventListener(name, (event) => {\n            fn(event.detail);\n        });\n    }\n}\n\nclass P2PClient extends Emitter {\n    _pc;\n    _dc;\n\n    constructor(answerer) {\n        super();\n\n        const pcConf = {\n            iceServers: [\n                { urls: \"stun:stun.l.google.com:19302\" },\n                { urls: \"stun:49.233.84.223:3478\" },\n            ],\n        };\n        this._pc = new RTCPeerConnection(pcConf);\n\n        const setupdc = () => {\n            this._dc.onopen = () => {\n                this.emit(\"connect\");\n            };\n            this._dc.onclose = () => {\n                this.emit(\"close\");\n            };\n            this._dc.onmessage = (event) => {\n                console.log(\"[P2PClient] receive:\", event);\n                this.emit(\"data\", event.data);\n            };\n        };\n        if (answerer) {\n            // answerer side\n            this._pc.ondatachannel = (event) => {\n                this._dc = event.channel;\n                setupdc();\n            };\n        } else {\n            // offerer side\n            this._dc = this._pc.createDataChannel(\"dc\");\n            setupdc();\n\n            const offerOpt = {\n                offerToReceiveAudio: 1,\n            };\n            this._pc.createOffer(offerOpt).then((offer) => {\n                this._pc.setLocalDescription(offer);\n                this.emit(\"offer\", offer);\n            });\n        }\n\n        this._pc.onicecandidate = (event) => {\n            if (event.candidate) {\n                this.emit(\"icecandidate\", event.candidate);\n\n                const c = event.candidate;\n                console.log(\"[P2PClient] gather candidate:\", c.address, c.port);\n            }\n        };\n\n        this._pc.oniceconnectionstatechange = (event) => {\n            console.log(\n                \"[P2PClient] connection state changed:\",\n                event.target.iceConnectionState\n            );\n        };\n    }\n\n    signal(name, data) {\n        switch (name) {\n            case \"offer\":\n                const offer = JSON.parse(data);\n                this._pc.setRemoteDescription(offer);\n                this._pc.createAnswer().then((answer) => {\n                    this._pc.setLocalDescription(answer);\n                    this.emit(\"answer\", answer);\n                });\n                break;\n\n            case \"answer\":\n                const answer = JSON.parse(data);\n                this._pc.setRemoteDescription(answer);\n                break;\n\n            case \"icecandidate\":\n                const candidate = JSON.parse(data);\n                this._pc.addIceCandidate(candidate);\n                break;\n        }\n    }\n\n    get connected() {\n        return this._dc?.readyState === \"open\";\n    }\n\n    send(data) {\n        console.log(\"[P2PClient] send:\", data);\n        this._dc.send(data);\n    }\n}\n\nclass P2PManager {\n    _rc; // relay client\n    _pcs; // p2p clients\n    onconnect;\n    onmessage;\n    onclose;\n\n    constructor(peerID) {\n        this._pcs = new Map();\n\n        const onrelaymessage = (from, name, data) => {\n            const pc = this.createConnection(from, true);\n            pc.signal(name, data);\n        };\n        this._rc = new RelayClient(peerID, onrelaymessage);\n    }\n\n    createConnection(peerID, answerer) {\n        let pc = this._pcs.get(peerID);\n\n        if (!pc) {\n            pc = new P2PClient(answerer);\n            this._pcs.set(peerID, pc);\n\n            // exchange signaling data\n            pc.on(\"offer\", (offer) => {\n                this._rc.send(peerID, \"offer\", offer);\n            });\n            pc.on(\"answer\", (answer) => {\n                this._rc.send(peerID, \"answer\", answer);\n            });\n            pc.on(\"icecandidate\", (candidate) => {\n                this._rc.send(peerID, \"icecandidate\", candidate);\n            });\n\n            pc.on(\"connect\", () => {\n                if (this.onconnect) {\n                    this.onconnect(pc);\n                }\n            });\n            pc.on(\"data\", (data) => {\n                if (this.onmessage) {\n                    this.onmessage(pc, data);\n                }\n            });\n            pc.on(\"close\", () => {\n                this._pcs.delete(peerID);\n\n                if (this.onclose) {\n                    this.onclose(pc);\n                }\n            });\n        }\n\n        return pc;\n    }\n}\n\nexport class PingClient {\n    _pm;\n    _result;\n    _rtt = -1;\n\n    constructor(peerID) {\n        this._pm = new P2PManager(peerID);\n        this._result = new Map();\n\n        this._pm.onmessage = (pc, data) => {\n            const obj = JSON.parse(data);\n\n            switch (obj.method) {\n                case \"ping\":\n                    const reply = {\n                        method: \"pong\",\n                        data: {\n                            task_id: obj.data.task_id,\n                            send_time: obj.data.send_time,\n                        },\n                    };\n                    pc.send(JSON.stringify(reply));\n                    break;\n\n                case \"pong\":\n                    const now = new Date().getTime();\n                    const taskID = obj.data.task_id;\n                    const sendTime = obj.data.send_time;\n                    const rtt = (now - sendTime) / 2;\n                    this._result.set(taskID, rtt);\n                    break;\n            }\n        };\n    }\n\n    async ping(peerID) {\n        const taskID = uuidv4();\n        this._result.set(taskID, -1);\n\n        const pc = this._pm.createConnection(peerID);\n        let success = await wait4(() => {\n            return pc.connected;\n        }, 2000);\n        if (!success) {\n            console.log(\"[PingClient] connect fail\");\n            return -1;\n        }\n\n        const timestamp = new Date().getTime();\n        const obj = {\n            method: \"ping\",\n            data: {\n                task_id: taskID,\n                send_time: timestamp,\n            },\n        };\n        const msg = JSON.stringify(obj);\n        pc.send(msg);\n\n        success = await wait4(() => {\n            return this._result.get(taskID) !== -1;\n        }, 5000);\n        if (!success) {\n            console.log(\"[PingClient] ping fail\");\n            return -1;\n        }\n\n        const rtt = this._result.get(taskID);\n        this._result.delete(taskID);\n        console.log(\"[PingClient] rtt:\", rtt);\n        return rtt;\n    }\n\n    async pingN(peerID, n) {\n        let cnt = 0;\n        let total = 0;\n        for (let i = 0; i < n; i++) {\n            const rtt = await this.ping(peerID);\n            if (rtt == -1) {\n                continue;\n            }\n\n            cnt++;\n            total = total + rtt;\n        }\n\n        if (cnt == 0) {\n            return -1;\n        }\n\n        return total / cnt;\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { onMessage } from \"@/background/library/decorators\";\nimport { PingClient } from \"@/background/library/p2psdk\";\nexport class Offscreen {\n    pingClient = undefined;\n    async createClient(message, sender, sendResponse) {\n        if (offscreen.pingClient) {\n            sendResponse(\"OK\");\n            return;\n        }\n        if (message.data) {\n            offscreen.pingClient = new PingClient(message.data?.clientid);\n        }\n        sendResponse(\"OK\");\n    }\n    async performLatencyTask(message, sender, sendResponse) {\n        if (!offscreen.pingClient) {\n            sendResponse(\"OK\");\n            return;\n        }\n        if (message.data) {\n            const ttl = await offscreen.pingClient.ping(message.data.destcid);\n            sendResponse(ttl);\n        }\n    }\n}\n__decorate([\n    onMessage(\"createClient\")\n], Offscreen.prototype, \"createClient\", null);\n__decorate([\n    onMessage(\"performLatencyTask\")\n], Offscreen.prototype, \"performLatencyTask\", null);\nconst offscreen = new Offscreen();\n"],"names":["onMessage","action","target","propertyKey","descriptor","originalMethod","value","chrome","runtime","addListener","message","sender","sendResponse","call","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","_callSuper","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","_inherits","_setPrototypeOf","_wrapNativeSuper","Map","Function","toString","indexOf","_isNativeFunction","has","get","set","Wrapper","arguments","bind","_construct","Boolean","valueOf","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_defineProperty","toPrimitive","String","Number","_toPrimitive","asyncGeneratorStep","_asyncToGenerator","_next","_throw","wait4","_x","_x2","_wait","_callee3","cond","timeout","startTime","_context3","Date","now","setTimeout","RelayClient","peerID","onmessage","process","this","_peerID","_connect","_this","_ws","WebSocket","onopen","console","log","_state","_register","success","_keepAlive","close","event","evData","data","JSON","parse","cmd","obj","from_peer_id","event_name","_lastPongTime","error","onerror","onclose","clearInterval","_keepAliveTimer","_reconnect","_this2","peer_id","stringify","send","_this3","setInterval","_reconnectInterval","_this4","Math","min","reconnectTimeCeiling","to","to_peer_id","msg","P2PClient","_Emitter","answerer","_this5","_pc","RTCPeerConnection","iceServers","urls","setupdc","_dc","emit","ondatachannel","channel","createDataChannel","createOffer","offerToReceiveAudio","offer","setLocalDescription","onicecandidate","candidate","address","port","oniceconnectionstatechange","iceConnectionState","_this6","setRemoteDescription","createAnswer","answer","addIceCandidate","_this$_dc","readyState","_EventTarget","Emitter","CustomEvent","detail","dispatchEvent","fn","addEventListener","EventTarget","P2PManager","_this7","_pcs","_rc","from","createConnection","signal","_this8","pc","on","onconnect","PingClient","_this9","_pm","_result","reply","task_id","send_time","getTime","taskID","rtt","_ping","_callee","timestamp","_this10","_context","replace","crypto","getRandomValues","Uint8Array","connected","_x3","_pingN","_callee2","cnt","total","_context2","ping","_x4","_x5","__decorate","decorators","desc","getOwnPropertyDescriptor","decorate","Offscreen","pingClient","undefined","createClient","offscreen","clientid","performLatencyTask","destcid"],"sourceRoot":""}